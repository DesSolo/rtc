// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"rtc/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthenticator
func (_mock *MockAuthenticator) Authenticate(token string) (*auth.Payload, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *auth.Payload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*auth.Payload, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *auth.Payload); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Payload)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - token string
func (_e *MockAuthenticator_Expecter) Authenticate(token interface{}) *MockAuthenticator_Authenticate_Call {
	return &MockAuthenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", token)}
}

func (_c *MockAuthenticator_Authenticate_Call) Run(run func(token string)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) Return(payload *auth.Payload, err error) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) RunAndReturn(run func(token string) (*auth.Payload, error)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}
