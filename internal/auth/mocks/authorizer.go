// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthorizer creates a new instance of MockAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizer {
	mock := &MockAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthorizer is an autogenerated mock type for the Authorizer type
type MockAuthorizer struct {
	mock.Mock
}

type MockAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizer) EXPECT() *MockAuthorizer_Expecter {
	return &MockAuthorizer_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockAuthorizer
func (_mock *MockAuthorizer) Authorize(ctx context.Context, input map[string]any) error {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any) error); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthorizer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthorizer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - input map[string]any
func (_e *MockAuthorizer_Expecter) Authorize(ctx interface{}, input interface{}) *MockAuthorizer_Authorize_Call {
	return &MockAuthorizer_Authorize_Call{Call: _e.mock.On("Authorize", ctx, input)}
}

func (_c *MockAuthorizer_Authorize_Call) Run(run func(ctx context.Context, input map[string]any)) *MockAuthorizer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthorizer_Authorize_Call) Return(err error) *MockAuthorizer_Authorize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthorizer_Authorize_Call) RunAndReturn(run func(ctx context.Context, input map[string]any) error) *MockAuthorizer_Authorize_Call {
	_c.Call.Return(run)
	return _c
}
