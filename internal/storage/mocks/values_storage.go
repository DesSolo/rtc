// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"github.com/DesSolo/rtc/internal/storage"

	mock "github.com/stretchr/testify/mock"
)

// NewMockValuesStorage creates a new instance of MockValuesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValuesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValuesStorage {
	mock := &MockValuesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValuesStorage is an autogenerated mock type for the ValuesStorage type
type MockValuesStorage struct {
	mock.Mock
}

type MockValuesStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValuesStorage) EXPECT() *MockValuesStorage_Expecter {
	return &MockValuesStorage_Expecter{mock: &_m.Mock}
}

// DeleteValues provides a mock function for the type MockValuesStorage
func (_mock *MockValuesStorage) DeleteValues(ctx context.Context, keys []storage.ValuesStorageKey) error {
	ret := _mock.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteValues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []storage.ValuesStorageKey) error); ok {
		r0 = returnFunc(ctx, keys)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValuesStorage_DeleteValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteValues'
type MockValuesStorage_DeleteValues_Call struct {
	*mock.Call
}

// DeleteValues is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []storage.ValuesStorageKey
func (_e *MockValuesStorage_Expecter) DeleteValues(ctx interface{}, keys interface{}) *MockValuesStorage_DeleteValues_Call {
	return &MockValuesStorage_DeleteValues_Call{Call: _e.mock.On("DeleteValues", ctx, keys)}
}

func (_c *MockValuesStorage_DeleteValues_Call) Run(run func(ctx context.Context, keys []storage.ValuesStorageKey)) *MockValuesStorage_DeleteValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []storage.ValuesStorageKey
		if args[1] != nil {
			arg1 = args[1].([]storage.ValuesStorageKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValuesStorage_DeleteValues_Call) Return(err error) *MockValuesStorage_DeleteValues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValuesStorage_DeleteValues_Call) RunAndReturn(run func(ctx context.Context, keys []storage.ValuesStorageKey) error) *MockValuesStorage_DeleteValues_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteValuesByPath provides a mock function for the type MockValuesStorage
func (_mock *MockValuesStorage) DeleteValuesByPath(ctx context.Context, path storage.ValuesStoragePath) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteValuesByPath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.ValuesStoragePath) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValuesStorage_DeleteValuesByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteValuesByPath'
type MockValuesStorage_DeleteValuesByPath_Call struct {
	*mock.Call
}

// DeleteValuesByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path storage.ValuesStoragePath
func (_e *MockValuesStorage_Expecter) DeleteValuesByPath(ctx interface{}, path interface{}) *MockValuesStorage_DeleteValuesByPath_Call {
	return &MockValuesStorage_DeleteValuesByPath_Call{Call: _e.mock.On("DeleteValuesByPath", ctx, path)}
}

func (_c *MockValuesStorage_DeleteValuesByPath_Call) Run(run func(ctx context.Context, path storage.ValuesStoragePath)) *MockValuesStorage_DeleteValuesByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.ValuesStoragePath
		if args[1] != nil {
			arg1 = args[1].(storage.ValuesStoragePath)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValuesStorage_DeleteValuesByPath_Call) Return(err error) *MockValuesStorage_DeleteValuesByPath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValuesStorage_DeleteValuesByPath_Call) RunAndReturn(run func(ctx context.Context, path storage.ValuesStoragePath) error) *MockValuesStorage_DeleteValuesByPath_Call {
	_c.Call.Return(run)
	return _c
}

// SetValues provides a mock function for the type MockValuesStorage
func (_mock *MockValuesStorage) SetValues(ctx context.Context, values storage.ValuesStorageKV) error {
	ret := _mock.Called(ctx, values)

	if len(ret) == 0 {
		panic("no return value specified for SetValues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.ValuesStorageKV) error); ok {
		r0 = returnFunc(ctx, values)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockValuesStorage_SetValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValues'
type MockValuesStorage_SetValues_Call struct {
	*mock.Call
}

// SetValues is a helper method to define mock.On call
//   - ctx context.Context
//   - values storage.ValuesStorageKV
func (_e *MockValuesStorage_Expecter) SetValues(ctx interface{}, values interface{}) *MockValuesStorage_SetValues_Call {
	return &MockValuesStorage_SetValues_Call{Call: _e.mock.On("SetValues", ctx, values)}
}

func (_c *MockValuesStorage_SetValues_Call) Run(run func(ctx context.Context, values storage.ValuesStorageKV)) *MockValuesStorage_SetValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.ValuesStorageKV
		if args[1] != nil {
			arg1 = args[1].(storage.ValuesStorageKV)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValuesStorage_SetValues_Call) Return(err error) *MockValuesStorage_SetValues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockValuesStorage_SetValues_Call) RunAndReturn(run func(ctx context.Context, values storage.ValuesStorageKV) error) *MockValuesStorage_SetValues_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function for the type MockValuesStorage
func (_mock *MockValuesStorage) Values(ctx context.Context, keys []storage.ValuesStorageKey) (storage.ValuesStorageKV, error) {
	ret := _mock.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 storage.ValuesStorageKV
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []storage.ValuesStorageKey) (storage.ValuesStorageKV, error)); ok {
		return returnFunc(ctx, keys)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []storage.ValuesStorageKey) storage.ValuesStorageKV); ok {
		r0 = returnFunc(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ValuesStorageKV)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []storage.ValuesStorageKey) error); ok {
		r1 = returnFunc(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockValuesStorage_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockValuesStorage_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []storage.ValuesStorageKey
func (_e *MockValuesStorage_Expecter) Values(ctx interface{}, keys interface{}) *MockValuesStorage_Values_Call {
	return &MockValuesStorage_Values_Call{Call: _e.mock.On("Values", ctx, keys)}
}

func (_c *MockValuesStorage_Values_Call) Run(run func(ctx context.Context, keys []storage.ValuesStorageKey)) *MockValuesStorage_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []storage.ValuesStorageKey
		if args[1] != nil {
			arg1 = args[1].([]storage.ValuesStorageKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValuesStorage_Values_Call) Return(valuesStorageKV storage.ValuesStorageKV, err error) *MockValuesStorage_Values_Call {
	_c.Call.Return(valuesStorageKV, err)
	return _c
}

func (_c *MockValuesStorage_Values_Call) RunAndReturn(run func(ctx context.Context, keys []storage.ValuesStorageKey) (storage.ValuesStorageKV, error)) *MockValuesStorage_Values_Call {
	_c.Call.Return(run)
	return _c
}

// ValuesByPath provides a mock function for the type MockValuesStorage
func (_mock *MockValuesStorage) ValuesByPath(ctx context.Context, path storage.ValuesStoragePath) (storage.ValuesStorageKV, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ValuesByPath")
	}

	var r0 storage.ValuesStorageKV
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.ValuesStoragePath) (storage.ValuesStorageKV, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.ValuesStoragePath) storage.ValuesStorageKV); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ValuesStorageKV)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, storage.ValuesStoragePath) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockValuesStorage_ValuesByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValuesByPath'
type MockValuesStorage_ValuesByPath_Call struct {
	*mock.Call
}

// ValuesByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path storage.ValuesStoragePath
func (_e *MockValuesStorage_Expecter) ValuesByPath(ctx interface{}, path interface{}) *MockValuesStorage_ValuesByPath_Call {
	return &MockValuesStorage_ValuesByPath_Call{Call: _e.mock.On("ValuesByPath", ctx, path)}
}

func (_c *MockValuesStorage_ValuesByPath_Call) Run(run func(ctx context.Context, path storage.ValuesStoragePath)) *MockValuesStorage_ValuesByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.ValuesStoragePath
		if args[1] != nil {
			arg1 = args[1].(storage.ValuesStoragePath)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValuesStorage_ValuesByPath_Call) Return(valuesStorageKV storage.ValuesStorageKV, err error) *MockValuesStorage_ValuesByPath_Call {
	_c.Call.Return(valuesStorageKV, err)
	return _c
}

func (_c *MockValuesStorage_ValuesByPath_Call) RunAndReturn(run func(ctx context.Context, path storage.ValuesStoragePath) (storage.ValuesStorageKV, error)) *MockValuesStorage_ValuesByPath_Call {
	_c.Call.Return(run)
	return _c
}
