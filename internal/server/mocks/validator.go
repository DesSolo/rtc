// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockvalidator creates a new instance of mockvalidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockvalidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockvalidator {
	mock := &mockvalidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockvalidator is an autogenerated mock type for the validator type
type mockvalidator struct {
	mock.Mock
}

type mockvalidator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockvalidator) EXPECT() *mockvalidator_Expecter {
	return &mockvalidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function for the type mockvalidator
func (_mock *mockvalidator) Validate() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockvalidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type mockvalidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *mockvalidator_Expecter) Validate() *mockvalidator_Validate_Call {
	return &mockvalidator_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *mockvalidator_Validate_Call) Run(run func()) *mockvalidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockvalidator_Validate_Call) Return(err error) *mockvalidator_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockvalidator_Validate_Call) RunAndReturn(run func() error) *mockvalidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}
