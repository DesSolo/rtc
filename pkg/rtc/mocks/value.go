// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockValue creates a new instance of MockValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValue {
	mock := &MockValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValue is an autogenerated mock type for the Value type
type MockValue struct {
	mock.Mock
}

type MockValue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValue) EXPECT() *MockValue_Expecter {
	return &MockValue_Expecter{mock: &_m.Mock}
}

// Bool provides a mock function for the type MockValue
func (_mock *MockValue) Bool() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bool")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockValue_Bool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bool'
type MockValue_Bool_Call struct {
	*mock.Call
}

// Bool is a helper method to define mock.On call
func (_e *MockValue_Expecter) Bool() *MockValue_Bool_Call {
	return &MockValue_Bool_Call{Call: _e.mock.On("Bool")}
}

func (_c *MockValue_Bool_Call) Run(run func()) *MockValue_Bool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_Bool_Call) Return(b bool) *MockValue_Bool_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockValue_Bool_Call) RunAndReturn(run func() bool) *MockValue_Bool_Call {
	_c.Call.Return(run)
	return _c
}

// Float64 provides a mock function for the type MockValue
func (_mock *MockValue) Float64() float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Float64")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockValue_Float64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Float64'
type MockValue_Float64_Call struct {
	*mock.Call
}

// Float64 is a helper method to define mock.On call
func (_e *MockValue_Expecter) Float64() *MockValue_Float64_Call {
	return &MockValue_Float64_Call{Call: _e.mock.On("Float64")}
}

func (_c *MockValue_Float64_Call) Run(run func()) *MockValue_Float64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_Float64_Call) Return(f float64) *MockValue_Float64_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockValue_Float64_Call) RunAndReturn(run func() float64) *MockValue_Float64_Call {
	_c.Call.Return(run)
	return _c
}

// Int provides a mock function for the type MockValue
func (_mock *MockValue) Int() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Int")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockValue_Int_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Int'
type MockValue_Int_Call struct {
	*mock.Call
}

// Int is a helper method to define mock.On call
func (_e *MockValue_Expecter) Int() *MockValue_Int_Call {
	return &MockValue_Int_Call{Call: _e.mock.On("Int")}
}

func (_c *MockValue_Int_Call) Run(run func()) *MockValue_Int_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_Int_Call) Return(n int) *MockValue_Int_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockValue_Int_Call) RunAndReturn(run func() int) *MockValue_Int_Call {
	_c.Call.Return(run)
	return _c
}

// MaybeBool provides a mock function for the type MockValue
func (_mock *MockValue) MaybeBool() (bool, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaybeBool")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (bool, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockValue_MaybeBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaybeBool'
type MockValue_MaybeBool_Call struct {
	*mock.Call
}

// MaybeBool is a helper method to define mock.On call
func (_e *MockValue_Expecter) MaybeBool() *MockValue_MaybeBool_Call {
	return &MockValue_MaybeBool_Call{Call: _e.mock.On("MaybeBool")}
}

func (_c *MockValue_MaybeBool_Call) Run(run func()) *MockValue_MaybeBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_MaybeBool_Call) Return(b bool, err error) *MockValue_MaybeBool_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockValue_MaybeBool_Call) RunAndReturn(run func() (bool, error)) *MockValue_MaybeBool_Call {
	_c.Call.Return(run)
	return _c
}

// MaybeFloat64 provides a mock function for the type MockValue
func (_mock *MockValue) MaybeFloat64() (float64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaybeFloat64")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (float64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockValue_MaybeFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaybeFloat64'
type MockValue_MaybeFloat64_Call struct {
	*mock.Call
}

// MaybeFloat64 is a helper method to define mock.On call
func (_e *MockValue_Expecter) MaybeFloat64() *MockValue_MaybeFloat64_Call {
	return &MockValue_MaybeFloat64_Call{Call: _e.mock.On("MaybeFloat64")}
}

func (_c *MockValue_MaybeFloat64_Call) Run(run func()) *MockValue_MaybeFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_MaybeFloat64_Call) Return(f float64, err error) *MockValue_MaybeFloat64_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockValue_MaybeFloat64_Call) RunAndReturn(run func() (float64, error)) *MockValue_MaybeFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// MaybeInt provides a mock function for the type MockValue
func (_mock *MockValue) MaybeInt() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaybeInt")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockValue_MaybeInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaybeInt'
type MockValue_MaybeInt_Call struct {
	*mock.Call
}

// MaybeInt is a helper method to define mock.On call
func (_e *MockValue_Expecter) MaybeInt() *MockValue_MaybeInt_Call {
	return &MockValue_MaybeInt_Call{Call: _e.mock.On("MaybeInt")}
}

func (_c *MockValue_MaybeInt_Call) Run(run func()) *MockValue_MaybeInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_MaybeInt_Call) Return(n int, err error) *MockValue_MaybeInt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockValue_MaybeInt_Call) RunAndReturn(run func() (int, error)) *MockValue_MaybeInt_Call {
	_c.Call.Return(run)
	return _c
}

// MaybeString provides a mock function for the type MockValue
func (_mock *MockValue) MaybeString() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaybeString")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockValue_MaybeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaybeString'
type MockValue_MaybeString_Call struct {
	*mock.Call
}

// MaybeString is a helper method to define mock.On call
func (_e *MockValue_Expecter) MaybeString() *MockValue_MaybeString_Call {
	return &MockValue_MaybeString_Call{Call: _e.mock.On("MaybeString")}
}

func (_c *MockValue_MaybeString_Call) Run(run func()) *MockValue_MaybeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_MaybeString_Call) Return(s string, err error) *MockValue_MaybeString_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockValue_MaybeString_Call) RunAndReturn(run func() (string, error)) *MockValue_MaybeString_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type MockValue
func (_mock *MockValue) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockValue_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockValue_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockValue_Expecter) String() *MockValue_String_Call {
	return &MockValue_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockValue_String_Call) Run(run func()) *MockValue_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_String_Call) Return(s string) *MockValue_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockValue_String_Call) RunAndReturn(run func() string) *MockValue_String_Call {
	_c.Call.Return(run)
	return _c
}
