// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"github.com/DesSolo/rtc/pkg/rtc"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockClient
func (_mock *MockClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(err error) *MockClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func() error) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockClient
func (_mock *MockClient) Value(context1 context.Context, key rtc.Key) (rtc.Value, error) {
	ret := _mock.Called(context1, key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 rtc.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, rtc.Key) (rtc.Value, error)); ok {
		return returnFunc(context1, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, rtc.Key) rtc.Value); ok {
		r0 = returnFunc(context1, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rtc.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, rtc.Key) error); ok {
		r1 = returnFunc(context1, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockClient_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - context1 context.Context
//   - key rtc.Key
func (_e *MockClient_Expecter) Value(context1 interface{}, key interface{}) *MockClient_Value_Call {
	return &MockClient_Value_Call{Call: _e.mock.On("Value", context1, key)}
}

func (_c *MockClient_Value_Call) Run(run func(context1 context.Context, key rtc.Key)) *MockClient_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 rtc.Key
		if args[1] != nil {
			arg1 = args[1].(rtc.Key)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Value_Call) Return(value rtc.Value, err error) *MockClient_Value_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockClient_Value_Call) RunAndReturn(run func(context1 context.Context, key rtc.Key) (rtc.Value, error)) *MockClient_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WatchValue provides a mock function for the type MockClient
func (_mock *MockClient) WatchValue(ctx context.Context, key rtc.Key, handler rtc.ValueChangeCallback) error {
	ret := _mock.Called(ctx, key, handler)

	if len(ret) == 0 {
		panic("no return value specified for WatchValue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, rtc.Key, rtc.ValueChangeCallback) error); ok {
		r0 = returnFunc(ctx, key, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_WatchValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchValue'
type MockClient_WatchValue_Call struct {
	*mock.Call
}

// WatchValue is a helper method to define mock.On call
//   - ctx context.Context
//   - key rtc.Key
//   - handler rtc.ValueChangeCallback
func (_e *MockClient_Expecter) WatchValue(ctx interface{}, key interface{}, handler interface{}) *MockClient_WatchValue_Call {
	return &MockClient_WatchValue_Call{Call: _e.mock.On("WatchValue", ctx, key, handler)}
}

func (_c *MockClient_WatchValue_Call) Run(run func(ctx context.Context, key rtc.Key, handler rtc.ValueChangeCallback)) *MockClient_WatchValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 rtc.Key
		if args[1] != nil {
			arg1 = args[1].(rtc.Key)
		}
		var arg2 rtc.ValueChangeCallback
		if args[2] != nil {
			arg2 = args[2].(rtc.ValueChangeCallback)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClient_WatchValue_Call) Return(err error) *MockClient_WatchValue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_WatchValue_Call) RunAndReturn(run func(ctx context.Context, key rtc.Key, handler rtc.ValueChangeCallback) error) *MockClient_WatchValue_Call {
	_c.Call.Return(run)
	return _c
}
