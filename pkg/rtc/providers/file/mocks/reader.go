// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"rtc/pkg/rtc"

	mock "github.com/stretchr/testify/mock"
)

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type MockReader
func (_mock *MockReader) Read(bytes []byte) (map[rtc.Key]rtc.Value, error) {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 map[rtc.Key]rtc.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (map[rtc.Key]rtc.Value, error)); ok {
		return returnFunc(bytes)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) map[rtc.Key]rtc.Value); ok {
		r0 = returnFunc(bytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[rtc.Key]rtc.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - bytes []byte
func (_e *MockReader_Expecter) Read(bytes interface{}) *MockReader_Read_Call {
	return &MockReader_Read_Call{Call: _e.mock.On("Read", bytes)}
}

func (_c *MockReader_Read_Call) Run(run func(bytes []byte)) *MockReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockReader_Read_Call) Return(keyToValue map[rtc.Key]rtc.Value, err error) *MockReader_Read_Call {
	_c.Call.Return(keyToValue, err)
	return _c
}

func (_c *MockReader_Read_Call) RunAndReturn(run func(bytes []byte) (map[rtc.Key]rtc.Value, error)) *MockReader_Read_Call {
	_c.Call.Return(run)
	return _c
}
